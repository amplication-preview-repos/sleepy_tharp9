/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PasswordReset } from "./PasswordReset";
import { PasswordResetCountArgs } from "./PasswordResetCountArgs";
import { PasswordResetFindManyArgs } from "./PasswordResetFindManyArgs";
import { PasswordResetFindUniqueArgs } from "./PasswordResetFindUniqueArgs";
import { CreatePasswordResetArgs } from "./CreatePasswordResetArgs";
import { UpdatePasswordResetArgs } from "./UpdatePasswordResetArgs";
import { DeletePasswordResetArgs } from "./DeletePasswordResetArgs";
import { PasswordResetService } from "../passwordReset.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PasswordReset)
export class PasswordResetResolverBase {
  constructor(
    protected readonly service: PasswordResetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "read",
    possession: "any",
  })
  async _passwordResetsMeta(
    @graphql.Args() args: PasswordResetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PasswordReset])
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "read",
    possession: "any",
  })
  async passwordResets(
    @graphql.Args() args: PasswordResetFindManyArgs
  ): Promise<PasswordReset[]> {
    return this.service.passwordResets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PasswordReset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "read",
    possession: "own",
  })
  async passwordReset(
    @graphql.Args() args: PasswordResetFindUniqueArgs
  ): Promise<PasswordReset | null> {
    const result = await this.service.passwordReset(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PasswordReset)
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "create",
    possession: "any",
  })
  async createPasswordReset(
    @graphql.Args() args: CreatePasswordResetArgs
  ): Promise<PasswordReset> {
    return await this.service.createPasswordReset({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PasswordReset)
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "update",
    possession: "any",
  })
  async updatePasswordReset(
    @graphql.Args() args: UpdatePasswordResetArgs
  ): Promise<PasswordReset | null> {
    try {
      return await this.service.updatePasswordReset({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PasswordReset)
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "delete",
    possession: "any",
  })
  async deletePasswordReset(
    @graphql.Args() args: DeletePasswordResetArgs
  ): Promise<PasswordReset | null> {
    try {
      return await this.service.deletePasswordReset(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
