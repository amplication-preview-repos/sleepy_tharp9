/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PasswordResetService } from "../passwordReset.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PasswordResetCreateInput } from "./PasswordResetCreateInput";
import { PasswordReset } from "./PasswordReset";
import { PasswordResetFindManyArgs } from "./PasswordResetFindManyArgs";
import { PasswordResetWhereUniqueInput } from "./PasswordResetWhereUniqueInput";
import { PasswordResetUpdateInput } from "./PasswordResetUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PasswordResetControllerBase {
  constructor(
    protected readonly service: PasswordResetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PasswordReset })
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPasswordReset(
    @common.Body() data: PasswordResetCreateInput
  ): Promise<PasswordReset> {
    return await this.service.createPasswordReset({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        email: true,
        token: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PasswordReset] })
  @ApiNestedQuery(PasswordResetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async passwordResets(
    @common.Req() request: Request
  ): Promise<PasswordReset[]> {
    const args = plainToClass(PasswordResetFindManyArgs, request.query);
    return this.service.passwordResets({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        email: true,
        token: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PasswordReset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async passwordReset(
    @common.Param() params: PasswordResetWhereUniqueInput
  ): Promise<PasswordReset | null> {
    const result = await this.service.passwordReset({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        expiresAt: true,
        email: true,
        token: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PasswordReset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePasswordReset(
    @common.Param() params: PasswordResetWhereUniqueInput,
    @common.Body() data: PasswordResetUpdateInput
  ): Promise<PasswordReset | null> {
    try {
      return await this.service.updatePasswordReset({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          expiresAt: true,
          email: true,
          token: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PasswordReset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PasswordReset",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePasswordReset(
    @common.Param() params: PasswordResetWhereUniqueInput
  ): Promise<PasswordReset | null> {
    try {
      return await this.service.deletePasswordReset({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          expiresAt: true,
          email: true,
          token: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
