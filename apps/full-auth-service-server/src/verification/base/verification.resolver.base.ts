/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Verification } from "./Verification";
import { VerificationCountArgs } from "./VerificationCountArgs";
import { VerificationFindManyArgs } from "./VerificationFindManyArgs";
import { VerificationFindUniqueArgs } from "./VerificationFindUniqueArgs";
import { CreateVerificationArgs } from "./CreateVerificationArgs";
import { UpdateVerificationArgs } from "./UpdateVerificationArgs";
import { DeleteVerificationArgs } from "./DeleteVerificationArgs";
import { VerificationService } from "../verification.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Verification)
export class VerificationResolverBase {
  constructor(
    protected readonly service: VerificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "read",
    possession: "any",
  })
  async _verificationsMeta(
    @graphql.Args() args: VerificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Verification])
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "read",
    possession: "any",
  })
  async verifications(
    @graphql.Args() args: VerificationFindManyArgs
  ): Promise<Verification[]> {
    return this.service.verifications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Verification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "read",
    possession: "own",
  })
  async verification(
    @graphql.Args() args: VerificationFindUniqueArgs
  ): Promise<Verification | null> {
    const result = await this.service.verification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Verification)
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "create",
    possession: "any",
  })
  async createVerification(
    @graphql.Args() args: CreateVerificationArgs
  ): Promise<Verification> {
    return await this.service.createVerification({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Verification)
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "update",
    possession: "any",
  })
  async updateVerification(
    @graphql.Args() args: UpdateVerificationArgs
  ): Promise<Verification | null> {
    try {
      return await this.service.updateVerification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Verification)
  @nestAccessControl.UseRoles({
    resource: "Verification",
    action: "delete",
    possession: "any",
  })
  async deleteVerification(
    @graphql.Args() args: DeleteVerificationArgs
  ): Promise<Verification | null> {
    try {
      return await this.service.deleteVerification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
